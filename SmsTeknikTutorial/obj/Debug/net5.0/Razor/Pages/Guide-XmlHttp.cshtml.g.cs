#pragma checksum "C:\Users\tomas\source\Workspaces\Spiff\SmsTeknikTutorial\SmsTeknikTutorial\Pages\Guide-XmlHttp.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ab47834f7c20990bb4597a4e218257ae403a6bbf"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(SmsTeknikTutorial.Pages.Pages_Guide_XmlHttp), @"mvc.1.0.razor-page", @"/Pages/Guide-XmlHttp.cshtml")]
namespace SmsTeknikTutorial.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\tomas\source\Workspaces\Spiff\SmsTeknikTutorial\SmsTeknikTutorial\Pages\_ViewImports.cshtml"
using SmsTeknikTutorial;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ab47834f7c20990bb4597a4e218257ae403a6bbf", @"/Pages/Guide-XmlHttp.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"53a3934d9e7d7864b525e5c0edd030f09cd961cc", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Guide_XmlHttp : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-page", "/Index", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-page", "/CodeExamples", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-page", "Guide-DeliveryReports", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("btn btn-primary"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\tomas\source\Workspaces\Spiff\SmsTeknikTutorial\SmsTeknikTutorial\Pages\Guide-XmlHttp.cshtml"
  
    ViewData["Title"] = "XML over Http";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n<div>\r\n\r\n    <nav aria-label=\"breadcrumb\">\r\n        <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item\">");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ab47834f7c20990bb4597a4e218257ae403a6bbf4599", async() => {
                WriteLiteral("Veiledning");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Page = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"</li>
            <li class=""breadcrumb-item active"" aria-current=""page"">XML over HTTP</li>
        </ol>
    </nav>

    <h1>XML over HTTP</h1>

    <p>Dette prinsippet baserer seg på at man genererer et XML objekt som man poster (HTTP POST) til et endepunkt. XML objektet inneholder alle parameterne for å sende SMS, som f.eks. mottakere, avsendere, etc. Dette er en enkel teknikk som alle plattformer kan benytte.</p>
    <p>En enkel implementasjon vil innebære følgende:</p>
    <ol>
        <li>Opprett et XML objekt med nødvendige parametere for den aktuelle SMS. XML objektet kan enten genereres som ren tekst, eller ved å serialisere et objekt til XML. Sistnevnte metode er mest robust, og er omhandlet i kodeeksemplet.</li>
        <li>Post objektet til et endepunkt. Dette gjøres enkelt som et vanlig HTTP Post kall. Brukernavn og passord legges i URL.</li>
        <li>Motta respons fra kallet, som inneholder status på forsendelsen.</li>
    </ol>

    <h2>Format på XML objektet</h2>

    <p>Ek");
            WriteLiteral(@"sempel på XML objekt for å sende meldingen <strong>&quot;The quick brown fox&quot;</strong> til telefonnummer <strong>(+47) 90000000</strong> fra avsenderen <strong>&quot;Test&quot;</strong>:</p>

    <div class=""alert alert-secondary"">
<pre class=""pre-scrollable"" style='color:#000000;'><code><span style='color:#004a43; '>&lt;?</span><span style='color:#800000; font-weight:bold; '>xml</span><span style='color:#004a43; '> </span><span style='color:#074726; '>version</span><span style='color:#808030; '>=</span><span style='color:#800000; '>""</span><span style='color:#7d0045; '>1.0</span><span style='color:#800000; '>""</span><span style='color:#004a43; '> </span><span style='color:#074726; '>encoding</span><span style='color:#808030; '>=</span><span style='color:#800000; '>""</span><span style='color:#0000e6; '>utf-8</span><span style='color:#800000; '>""</span><span style='color:#004a43; '>?></span> 
<span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>sms-teknik</span><span style='color:#a6");
            WriteLiteral(@"5700; '>></span> 
    <span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>udmessage</span><span style='color:#a65700; '>></span><span style='color:#004a43; '>&lt;![CDATA[</span>The quick brown fox<span style='color:#004a43; '>]]&gt;</span><span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>udmessage</span><span style='color:#a65700; '>></span>
    <span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>smssender</span><span style='color:#a65700; '>></span>Test<span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>smssender</span><span style='color:#a65700; '>></span> 
    <span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>items</span><span style='color:#a65700; '>></span> 
        <span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>recipient</span><span style='color:#a65700; '>></span> 
            <span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>nr</span><span style='color:");
            WriteLiteral(@"#a65700; '>></span>+4790000000<span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>nr</span><span style='color:#a65700; '>></span> 
        <span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>recipient</span><span style='color:#a65700; '>></span> 
    <span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>items</span><span style='color:#a65700; '>></span> 
<span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>sms-teknik</span><span style='color:#a65700; '>></span>
</code></pre>
        <!--Created using ToHtml.com on 2021-08-09 06:37:08 UTC -->
    </div>

    <p>Eksemplet ovenfor inneholder minimum parametere for å kunne sende SMS. Det finnes i tillegg over 15 andre parametere for å styre tidspunkt for utsendelse, leveranserapporter, type SMS, etc. Se offisiell dokumentasjon for komplett parameterliste.</p>
    <p>For å sende samme SMS til flere mottakere:</p>


    <div class=""alert alert-secondary"">
<pre class=""pre-scrol");
            WriteLiteral(@"lable"" style='color:#000000;'><code><span style='color:#004a43; '>&lt;?</span><span style='color:#800000; font-weight:bold; '>xml</span><span style='color:#004a43; '> </span><span style='color:#074726; '>version</span><span style='color:#808030; '>=</span><span style='color:#800000; '>""</span><span style='color:#7d0045; '>1.0</span><span style='color:#800000; '>""</span><span style='color:#004a43; '> </span><span style='color:#074726; '>encoding</span><span style='color:#808030; '>=</span><span style='color:#800000; '>""</span><span style='color:#0000e6; '>utf-8</span><span style='color:#800000; '>""</span><span style='color:#004a43; '>?></span> 
<span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>sms-teknik</span><span style='color:#a65700; '>></span> 
    <span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>udmessage</span><span style='color:#a65700; '>></span><span style='color:#004a43; '>&lt;![CDATA[</span>The quick brown fox<span style='color:#004a43; '>]]&gt;</span><s");
            WriteLiteral(@"pan style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>udmessage</span><span style='color:#a65700; '>></span>
    <span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>smssender</span><span style='color:#a65700; '>></span>Test<span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>smssender</span><span style='color:#a65700; '>></span> 
    <span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>items</span><span style='color:#a65700; '>></span> 
        <span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>recipient</span><span style='color:#a65700; '>></span> 
            <span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>nr</span><span style='color:#a65700; '>></span>+4790000000<span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>nr</span><span style='color:#a65700; '>></span> 
        <span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>recipient</span><span style='");
            WriteLiteral(@"color:#a65700; '>></span> 
        <span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>recipient</span><span style='color:#a65700; '>></span> 
            <span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>nr</span><span style='color:#a65700; '>></span>+4790000001<span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>nr</span><span style='color:#a65700; '>></span> 
        <span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>recipient</span><span style='color:#a65700; '>></span> 
        <span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>recipient</span><span style='color:#a65700; '>></span> 
            <span style='color:#a65700; '>&lt;</span><span style='color:#5f5035; '>nr</span><span style='color:#a65700; '>></span>+4790000002<span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>nr</span><span style='color:#a65700; '>></span> 
        <span style='color:#a65700; '>&lt;/</span><span style");
            WriteLiteral(@"='color:#5f5035; '>recipient</span><span style='color:#a65700; '>></span> 
    <span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>items</span><span style='color:#a65700; '>></span> 
<span style='color:#a65700; '>&lt;/</span><span style='color:#5f5035; '>sms-teknik</span><span style='color:#a65700; '>></span>
</code></pre>
        <!--Created using ToHtml.com on 2021-08-09 06:41:02 UTC -->
    </div>


    <div class=""alert alert-info""><strong>TIPS!</strong> I mange tilfeller skal samme SMS sendes til flere mottakere. Det vil da være svært ressursbesparende å legge alle mottakerne av meldingen inn som vist i eksemplet ovenfor, i stedet for å utføre separate kall per SMS som skal sendes. </div>

    <p>Link til valideringsskjema (XSD): <a href=""https://www.smsteknik.se/dl/api/SMS_SUBMIT_REQUEST_v3.xsd"" target=""_blank"">https://www.smsteknik.se/dl/api/SMS_SUBMIT_REQUEST_v3.xsd</a></p>

    <h2>Utføre kall mot endepunkt</h2>

    <p>Endepunkt finnes på følgende plassering: <a hre");
            WriteLiteral(@"f=""https://api.smsteknik.se/send/xml/"" target=""_blank"">https://api.smsteknik.se/send/xml/</a></p>

    <div class=""alert alert-warning"">
        <p><strong>Merk!</strong> Denne metoden tillater brukernavn og passord som parametere direkte i URL, men det er en metode som ikke anbefales ettersom det kan etterlate spor i serverlogger og lignende. Det er derfor langt sikrere å benytte Basic Authentication i header, hvor brukernavn og passord blir beskyttet av ende-til-ende kryptering (SSL).</p>
        <p>Token for Basic Authentication ble utlevert av SMS Teknik ved etablering av konto, men kan ellers genereres ved å base64 encode <i>brukernavn:passord</i>.</p>
    </div>

    <p>XML objektet serialiseres til tekst og sendes som HTTP Post mot endepunkt.</p>


    <div class=""alert alert-secondary"">
        <h5 class=""alert-heading"">Eksempel</h5>
        <p>Under vises et eksempel på hvordan man kan poste et XML objekt til endepunktet.</p>
        <p>I eksemplet lengre ned (under <i>Returverdi</i>) vi");
            WriteLiteral("ses hvordan man kan behandle responsen. Se forøvrig ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ab47834f7c20990bb4597a4e218257ae403a6bbf15344", async() => {
                WriteLiteral("Kodeeksempel");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Page = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@" for full implementasjon.</p>
        <hr />


<code>
<pre style='color:#000000;'><span style='color:#800000; font-weight:bold; '>using</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>var</span> client <span style='color:#808030; '>=</span> <span style='color:#800000; font-weight:bold; '>new</span> System<span style='color:#808030; '>.</span>Net<span style='color:#808030; '>.</span>WebClient<span style='color:#808030; '>(</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
<span style='color:#800080; '>{</span>
    <span style='color:#696969; '>// It is recommended to use Basic Auth, but it is also possible to add credentials to URL.</span>
    client<span style='color:#808030; '>.</span>Headers<span style='color:#808030; '>[</span><span style='color:#800000; '>""</span><span style='color:#0000e6; '>Authorization</span><span style='color:#800000; '>""</span><span style='color:#808030; '>]</span> <span style='color:#808030; '>=</");
            WriteLiteral(@"span> <span style='color:#800000; '>""</span><span style='color:#0000e6; '>Basic [your token]</span><span style='color:#800000; '>""</span><span style='color:#800080; '>;</span>

    <span style='color:#696969; '>// Xml data. Generate from string og serialize from object.</span>
    <span style='color:#800000; font-weight:bold; '>var</span> xmlData <span style='color:#808030; '>=</span> <span style='color:#800000; '>""</span><span style='color:#0000e6; '>&lt;...></span><span style='color:#800000; '>""</span>

    <span style='color:#800000; font-weight:bold; '>var</span> returnData <span style='color:#808030; '>=</span> client<span style='color:#808030; '>.</span>UploadData<span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>new</span> Uri<span style='color:#808030; '>(</span><span style='color:#800000; '>""</span><span style='color:#0000e6; '>https://api.smsteknik.se/send/xml/</span><span style='color:#800000; '>""</span><span style='color:#808030; '>)</span><span style='color");
            WriteLiteral(@":#808030; '>,</span> xmlData<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>

    <span style='color:#696969; '>// Convert response from byte array to string.</span>
    <span style='color:#800000; font-weight:bold; '>var</span> response <span style='color:#808030; '>=</span> System<span style='color:#808030; '>.</span>Text<span style='color:#808030; '>.</span>Encoding<span style='color:#808030; '>.</span>Default<span style='color:#808030; '>.</span>GetString<span style='color:#808030; '>(</span>returnData<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>

    <span style='color:#696969; '>// Se example below on how to handle the sesponse.</span>

<span style='color:#800080; '>}</span>
</pre>
<!--Created using ToHtml.com on 2021-08-11 08:23:18 UTC -->
</code>

    </div>

    <h2>Returverdi</h2>
    <p>I responsen fra kallet mottar man informasjon om status på forespørselen.</p>
    <p>Dersom forespørselen feilet vil man motta en feilkode. ");
            WriteLiteral(@"Feilkoden er en tekststreng som begynner på 0: etterfulgt av feilmeldingen (eks «0:Access denied»).</p>
    <p>Merk at feilene man får i respons er i hovedsak prevalideringer, som feil på konto eller ugyldig telefonnummer. Vellykket utsendelse er derfor ingen garanti for at meldingen vil nå mottaker, men det er en forutsetning for at den skal bli prosessert videre. Benytt leveranserapporter for å få status på meldingen på veg mot mottaker.</p>
    <p>Dersom utsendelsen er vellykket vil man få en heltallverdi i retur. Denne verdien kalles SMSID, og vil entydig identifisere SMS-en i systemet. Denne verdien brukes blant annet i leveranserapporter, og må derfor lagres i databasen for fremtidig referanse.</p>
    <p>Dersom man sender til flere mottakere vil man få en status per mottaker. Statusene vil da være semikolonseparert (;), og gjengitt i samme rekkefølge som i forespørselen.</p>


    <div class=""alert alert-secondary"">

        <p>Eksempel på respons hvor den ene mottaker var vellykket mens den an");
            WriteLiteral(@"dre feilet:</p>
        <hr />
        <samp>
            1950940234;0:Invalid phonenumber - #+47123#
        </samp>
    </div>

    <div class=""alert alert-secondary"">
        <h5 class=""alert-heading"">Eksempel</h5>
        <p>For å sjekke status for hver av utsendelsene kan man gjøre som følgende:</p>
        <hr />


<code><pre class=""pre-scrollable"" style='color:#000000;'><span style='color:#800000; font-weight:bold; '>string</span> response <span style='color:#808030; '>=</span> <span style='color:#800080; '>;</span> <span style='color:#696969; '>// Get response from http post..</span>

<span style='color:#800000; font-weight:bold; '>string</span><span style='color:#808030; '>[</span><span style='color:#808030; '>]</span> arrResult <span style='color:#808030; '>=</span> response<span style='color:#808030; '>.</span>Split<span style='color:#808030; '>(</span><span style='color:#0000e6; '>';'</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>

<span style='");
            WriteLiteral(@"color:#800000; font-weight:bold; '>foreach</span> <span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>string</span> result <span style='color:#800000; font-weight:bold; '>in</span> arrResult<span style='color:#808030; '>)</span>
<span style='color:#800080; '>{</span>
    <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span>result<span style='color:#808030; '>.</span>StartsWith<span style='color:#808030; '>(</span><span style='color:#800000; '>""</span><span style='color:#0000e6; '>0:</span><span style='color:#800000; '>""</span><span style='color:#808030; '>)</span><span style='color:#808030; '>)</span>
    <span style='color:#800080; '>{</span>
        <span style='color:#696969; '>// Failed.</span>
        <span style='color:#800000; font-weight:bold; '>string</span> errorMessage <span style='color:#808030; '>=</span> result<span style='color:#808030; '>.</span>Substring<span style='color:#808030; '>(</span><span style='color:#0");
            WriteLiteral(@"08c00; '>2</span><span style='color:#808030; '>,</span> result<span style='color:#808030; '>.</span>Length <span style='color:#808030; '>-</span> <span style='color:#008c00; '>2</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
        Console<span style='color:#808030; '>.</span>WriteLine<span style='color:#808030; '>(</span><span style='color:#800000; '>""</span><span style='color:#0000e6; '>SMS failed with reason: </span><span style='color:#800000; '>""</span> <span style='color:#808030; '>+</span> errorMessage<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
    <span style='color:#800080; '>}</span>
    <span style='color:#800000; font-weight:bold; '>else</span>
    <span style='color:#800080; '>{</span>
        <span style='color:#696969; '>// Success</span>
        <span style='color:#800000; font-weight:bold; '>long</span> smsid <span style='color:#808030; '>=</span> Convert<span style='color:#808030; '>.</span>ToInt64<span style='color:#");
            WriteLiteral(@"808030; '>(</span>result<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
        Console<span style='color:#808030; '>.</span>WriteLine<span style='color:#808030; '>(</span><span style='color:#800000; '>""</span><span style='color:#0000e6; '>SMS successfully sent. SMS ID: </span><span style='color:#800000; '>""</span> <span style='color:#808030; '>+</span> smsid<span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>
    <span style='color:#800080; '>}</span>
<span style='color:#800080; '>}</span>
</pre></code>
        <!--Created using ToHtml.com on 2021-08-09 07:22:08 UTC -->
    </div>

    <h2>Kodeeksempler</h2>

    <p>Under ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ab47834f7c20990bb4597a4e218257ae403a6bbf24609", async() => {
                WriteLiteral("Kodeeksempler");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Page = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@" kan du laste ned et fungerende forslag på hvordan dette grensesnittet kan implementeres. Eksemplene viser hvordan XML kan serialisers fra objekter, og hvordan man kan behandle responsen for å avgjøre om utsendelsen var vellykket. Eksemplet viser også hvordan man konfigurerer ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ab47834f7c20990bb4597a4e218257ae403a6bbf26044", async() => {
                WriteLiteral("leveranserapporer");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Page = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(".</p>\r\n    <p>Under ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ab47834f7c20990bb4597a4e218257ae403a6bbf27227", async() => {
                WriteLiteral("Kodeeksempler");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Page = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(" er det også laget en Postman collection som demonstrerer utsendelse av SMS med ulike autentiseringsmetoder. </p>\r\n    \r\n    <p>");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ab47834f7c20990bb4597a4e218257ae403a6bbf28516", async() => {
                WriteLiteral("Gå til kodeeksempler");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Page = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("</p>\r\n\r\n</div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<SmsTeknikTutorial.Pages.Guide_XmlHttpModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<SmsTeknikTutorial.Pages.Guide_XmlHttpModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<SmsTeknikTutorial.Pages.Guide_XmlHttpModel>)PageContext?.ViewData;
        public SmsTeknikTutorial.Pages.Guide_XmlHttpModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
