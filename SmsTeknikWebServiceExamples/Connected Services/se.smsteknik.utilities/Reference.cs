//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace se.smsteknik.utilities
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://api.smsteknik.se/utilities/", ConfigurationName="se.smsteknik.utilities.UtilitiesSoap")]
    public interface UtilitiesSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.smsteknik.se/utilities/RequestStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> RequestStatusAsync(string id, string user, string pass, string[] smsids);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.smsteknik.se/utilities/RequestMSISDN", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlNode> RequestMSISDNAsync(string id, string user, string pass, string fromdate, string todate, string limit, string replycustomid);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.smsteknik.se/utilities/DeleteQueuedSMS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DeleteQueuedSMSAsync(string id, string user, string pass, long smsid);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.smsteknik.se/utilities/CheckCredits", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CheckCreditsAsync(string id, string user, string pass);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface UtilitiesSoapChannel : se.smsteknik.utilities.UtilitiesSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class UtilitiesSoapClient : System.ServiceModel.ClientBase<se.smsteknik.utilities.UtilitiesSoap>, se.smsteknik.utilities.UtilitiesSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public UtilitiesSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(UtilitiesSoapClient.GetBindingForEndpoint(endpointConfiguration), UtilitiesSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UtilitiesSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(UtilitiesSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UtilitiesSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(UtilitiesSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UtilitiesSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> RequestStatusAsync(string id, string user, string pass, string[] smsids)
        {
            return base.Channel.RequestStatusAsync(id, user, pass, smsids);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlNode> RequestMSISDNAsync(string id, string user, string pass, string fromdate, string todate, string limit, string replycustomid)
        {
            return base.Channel.RequestMSISDNAsync(id, user, pass, fromdate, todate, limit, replycustomid);
        }
        
        public System.Threading.Tasks.Task<string> DeleteQueuedSMSAsync(string id, string user, string pass, long smsid)
        {
            return base.Channel.DeleteQueuedSMSAsync(id, user, pass, smsid);
        }
        
        public System.Threading.Tasks.Task<string> CheckCreditsAsync(string id, string user, string pass)
        {
            return base.Channel.CheckCreditsAsync(id, user, pass);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.UtilitiesSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.UtilitiesSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.UtilitiesSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://api.smsteknik.se/utilities/Utilities.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.UtilitiesSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://api.smsteknik.se/utilities/Utilities.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            UtilitiesSoap,
            
            UtilitiesSoap12,
        }
    }
}
