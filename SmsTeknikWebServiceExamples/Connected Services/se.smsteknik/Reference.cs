//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace se.smsteknik
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://api.smsteknik.se/send/ws/v1.1", ConfigurationName="se.smsteknik.SendSMSSoap")]
    public interface SendSMSSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.smsteknik.se/send/ws/v1.1/SendSMSMulti", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SendSMSMultiAsync(
                    string id, 
                    string user, 
                    string pass, 
                    int operationtype, 
                    int flash, 
                    int multisms, 
                    int maxmultisms, 
                    int ttl, 
                    string customid, 
                    int compresstext, 
                    string senddate, 
                    string sendtime, 
                    string text, 
                    string udh, 
                    string smssender, 
                    int deliverystatustype, 
                    string deliverystatusaddress, 
                    int usereplynumber, 
                    int usereplyforwardtype, 
                    string usereplyforwardurl, 
                    string usereplycustomid, 
                    string[] recipients);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://api.smsteknik.se/send/ws/v1.1/SendSMSSingle", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SendSMSSingleAsync(string id, string user, string pass, int multisms, int maxmultisms, string text, string smssender, string recipient);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface SendSMSSoapChannel : se.smsteknik.SendSMSSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class SendSMSSoapClient : System.ServiceModel.ClientBase<se.smsteknik.SendSMSSoap>, se.smsteknik.SendSMSSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SendSMSSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(SendSMSSoapClient.GetBindingForEndpoint(endpointConfiguration), SendSMSSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SendSMSSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SendSMSSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SendSMSSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SendSMSSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SendSMSSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> SendSMSMultiAsync(
                    string id, 
                    string user, 
                    string pass, 
                    int operationtype, 
                    int flash, 
                    int multisms, 
                    int maxmultisms, 
                    int ttl, 
                    string customid, 
                    int compresstext, 
                    string senddate, 
                    string sendtime, 
                    string text, 
                    string udh, 
                    string smssender, 
                    int deliverystatustype, 
                    string deliverystatusaddress, 
                    int usereplynumber, 
                    int usereplyforwardtype, 
                    string usereplyforwardurl, 
                    string usereplycustomid, 
                    string[] recipients)
        {
            return base.Channel.SendSMSMultiAsync(id, user, pass, operationtype, flash, multisms, maxmultisms, ttl, customid, compresstext, senddate, sendtime, text, udh, smssender, deliverystatustype, deliverystatusaddress, usereplynumber, usereplyforwardtype, usereplyforwardurl, usereplycustomid, recipients);
        }
        
        public System.Threading.Tasks.Task<string> SendSMSSingleAsync(string id, string user, string pass, int multisms, int maxmultisms, string text, string smssender, string recipient)
        {
            return base.Channel.SendSMSSingleAsync(id, user, pass, multisms, maxmultisms, text, smssender, recipient);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.SendSMSSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.SendSMSSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.SendSMSSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://api.smsteknik.se/send/ws/v1.1/Service.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.SendSMSSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://api.smsteknik.se/send/ws/v1.1/Service.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            SendSMSSoap,
            
            SendSMSSoap12,
        }
    }
}
