@page
@model SmsTeknikHttpWrapperExamples.Pages.SendSmsModel
@{
    ViewData["Title"] = "Send SMS (basic authentication)";
}

<div>
    <h1>Send SMS with Basic authentication</h1>


    <p>Use this method to send a simple SMS to a single receiver. All you have to do is to call an URL with parameters.</p>
    <p>Available properties for this method:</p>
    <ul>
        <li><i>id</i>, <i>user</i> and <i>pass</i>: credentials for your account. User and pass should be used as basic authentication, and not added to the URL.</li>
        <li><i>sender</i>: the sender as alphanumeric (eg. Test) or phone number starting with country prefix (eg. +4790000000)</li>
        <li><i>nr</i>: the receiver of the SMS (eg. +4790000000)</li>
        <li><i>multisms</i>: value indicating if allowed to send more that one message part (length > 160)</li>
        <li><i>maxmultisms</i>: number of allowed message parts</li>
        <li><i>msg</i>: the message to be sent</li>
        <li><i>operationtype</i>: type of SMX, eg. 0 = SMS</li>
        <li><i>customid</i>: add your own reference.</li>
        <li><i>senddate</i>: for scheduling. Must be on format yyyy-MM-dd (CET/CEST)</li>
        <li><i>sendtime</i>: for scheduling. Must be on format HH:mm:ss (CET/CEST).</li>
    </ul>

    <form method="post">

        <div class="form-group">
            <label for="txtSender">Sender</label>
            <input type="text" class="form-control" placeholder="Sender, ex Test or phone number" name="txtSender" value="" />
            <small class="form-text text-muted">Alphanumeric name or phone number (remember country prefix, eg. +4790000000.</small>
        </div>
        
        <div class="form-group">
            <label for="txtRecipient">Recipient</label>
            <input type="text" class="form-control" placeholder="Phone number" name="txtRecipient" value="" />
            <small class="form-text text-muted">Phone number starting with country prefix, eg. +4790000000</small>
        </div>

        <div class="form-group">
            <label for="txtText">Text</label>
            <textarea class="form-control" name="txtText" rows="3"></textarea>
            <small class="form-text text-muted">Remember to activate <i>multisms</i> and <i>maxmultisms</i> if more that 160 chars.</small>
        </div>
            
        <button type="submit" class="btn btn-primary">Submit</button>
        
        <hr />
        
        @if (!string.IsNullOrEmpty(Model.RawResponse))
        {
            <div class="alert alert-primary">
                <h5 class="alert-heading">Raw response from server:</h5>
                @Model.RawResponse
            </div>
        }

        @if(!string.IsNullOrEmpty(Model.Message))
        {
            <div style="margin-top: 15px;" class="alert alert-secondary">
                <h5 class="alert-heading">Message:</h5>
                @Model.Message
            </div>
        }

    </form>

</div>
